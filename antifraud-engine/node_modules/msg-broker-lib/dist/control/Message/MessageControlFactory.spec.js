"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MessageControlFactory_1 = require("./MessageControlFactory");
const KafkaMessageControl_1 = require("../Kafka/KafkaMessageControl");
const SqsMessageControl_1 = require("../SQS/SqsMessageControl");
const SnsMessageControl_1 = require("../SNS/SnsMessageControl");
const BrokerType_1 = require("../Common/BrokerType");
jest.mock("../Kafka/KafkaMessageControl");
jest.mock("../SQS/SqsMessageControl");
jest.mock("../SNS/SnsMessageControl");
describe("MessageControlFactory", () => {
    beforeEach(() => {
        jest.clearAllMocks();
    });
    it("should create a KafkaMessageControl when BrokerType is Kafka", () => {
        const mockParams = {
            type: BrokerType_1.BrokerType.Kafka,
            params: {
                consumer: {}, // mock bÃ¡sico
                topic: "my-topic",
                partition: 1,
                offset: "42",
            },
        };
        const control = MessageControlFactory_1.MessageControlFactory.createControl(mockParams);
        expect(KafkaMessageControl_1.KafkaMessageControl)
            .toHaveBeenCalledWith(mockParams.params.consumer, mockParams.params.topic, mockParams.params.partition, mockParams.params.offset);
        expect(control).toBeInstanceOf(KafkaMessageControl_1.KafkaMessageControl);
    });
    it("should create a SqsMessageControl when BrokerType is SQS", () => {
        const mockParams = {
            type: BrokerType_1.BrokerType.SQS,
            params: {
                sqsClient: {},
                queueUrl: "https://example.com/queue",
                receiptHandle: "abc123",
            },
        };
        const control = MessageControlFactory_1.MessageControlFactory.createControl(mockParams);
        expect(SqsMessageControl_1.SqsMessageControl)
            .toHaveBeenCalledWith(mockParams.params.sqsClient, mockParams.params.queueUrl, mockParams.params.receiptHandle);
        expect(control).toBeInstanceOf(SqsMessageControl_1.SqsMessageControl);
    });
    it("should create a SnsMessageControl when BrokerType is SNS", () => {
        const mockParams = {
            type: BrokerType_1.BrokerType.SNS,
        };
        const control = MessageControlFactory_1.MessageControlFactory.createControl(mockParams);
        expect(SnsMessageControl_1.SnsMessageControl)
            .toHaveBeenCalled();
        expect(control).toBeInstanceOf(SnsMessageControl_1.SnsMessageControl);
    });
    it("should throw an error for an unsupported BrokerType", () => {
        const invalidParams = { type: "InvalidType" };
        expect(() => MessageControlFactory_1.MessageControlFactory.createControl(invalidParams)).toThrow("Unsupported broker type: InvalidType");
    });
});
//# sourceMappingURL=MessageControlFactory.spec.js.map