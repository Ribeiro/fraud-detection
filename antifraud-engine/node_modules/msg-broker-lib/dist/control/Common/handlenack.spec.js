"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const handleNack_1 = require("./handleNack");
describe("handleNack", () => {
    it("should call retry if available", async () => {
        const retryMock = jest.fn().mockResolvedValue(undefined);
        const nackMock = jest.fn();
        const control = {
            retry: retryMock,
            nack: nackMock,
        };
        await (0, handleNack_1.handleNack)(control);
        expect(retryMock).toHaveBeenCalled();
        expect(nackMock).not.toHaveBeenCalled();
    });
    it("should call nack if retry is not available", async () => {
        const nackMock = jest.fn().mockResolvedValue(undefined);
        const control = {
            nack: nackMock,
        };
        const error = new Error("Test error");
        await (0, handleNack_1.handleNack)(control, error);
        expect(nackMock).toHaveBeenCalledWith(error);
    });
    it("should call nack with undefined if no error passed", async () => {
        const nackMock = jest.fn().mockResolvedValue(undefined);
        const control = {
            nack: nackMock,
        };
        await (0, handleNack_1.handleNack)(control);
        expect(nackMock).toHaveBeenCalledWith(undefined);
    });
});
//# sourceMappingURL=handlenack.spec.js.map