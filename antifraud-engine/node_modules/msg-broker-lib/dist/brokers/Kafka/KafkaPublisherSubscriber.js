"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KafkaPublisherSubscriber = void 0;
const kafkajs_1 = require("kafkajs");
const KafkaMessageControl_1 = require("../../control/Kafka/KafkaMessageControl");
class KafkaPublisherSubscriber {
    kafka;
    producer;
    constructor(brokers) {
        this.kafka = new kafkajs_1.Kafka({ brokers });
        this.producer = this.kafka.producer();
    }
    async publish(options, message) {
        const payload = {
            topic: options.destination,
            messages: [
                {
                    key: options.key,
                    value: JSON.stringify(message),
                    headers: options.headers,
                },
            ],
        };
        await this.producer.connect();
        await this.producer.send(payload);
        await this.producer.disconnect(); // Opcional: mantenha conectado para alto throughput
    }
    async subscribe(options, callback) {
        const consumerGroup = options.consumerGroup || "default-group";
        const consumer = this.kafka.consumer({ groupId: consumerGroup });
        await consumer.connect();
        await consumer.subscribe({
            topic: options.destination,
            fromBeginning: false,
        });
        await consumer.run({
            eachMessage: async (payload) => {
                const { topic, partition, message } = payload;
                const parsedMessage = {
                    id: message.key?.toString() || "",
                    payload: message.value ? JSON.parse(message.value.toString()) : null,
                    headers: message.headers
                        ? Object.fromEntries(Object.entries(message.headers).map(([k, v]) => [
                            k,
                            v?.toString() ?? "",
                        ]))
                        : {},
                };
                const control = new KafkaMessageControl_1.KafkaMessageControl(consumer, topic, partition, message.offset);
                try {
                    await callback(parsedMessage, control);
                }
                catch (err) {
                    console.error("Kafka message processing error:", err);
                }
            },
        });
    }
}
exports.KafkaPublisherSubscriber = KafkaPublisherSubscriber;
//# sourceMappingURL=KafkaPublisherSubscriber.js.map